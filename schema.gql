# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateCategory {
  _avg: CategoryAvgAggregate
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  _sum: CategorySumAggregate
}

type AggregateOrder {
  _avg: OrderAvgAggregate
  _count: OrderCountAggregate
  _max: OrderMaxAggregate
  _min: OrderMinAggregate
  _sum: OrderSumAggregate
}

type AggregateProduct {
  _avg: ProductAvgAggregate
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  _sum: ProductSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type Category {
  _count: CategoryCount
  createdAt: DateTime!
  id: Int!
  name: String!
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  updatedAt: DateTime!
}

type CategoryAvgAggregate {
  id: Float
}

input CategoryAvgOrderByAggregateInput {
  id: SortOrder
}

type CategoryCount {
  products: Int!
}

type CategoryCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input CategoryCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryCreateInput {
  createdAt: DateTime
  name: String!
  products: ProductCreateNestedManyWithoutCategoriesInput
  updatedAt: DateTime
}

input CategoryCreateManyInput {
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input CategoryCreateNestedManyWithoutProductsInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutProductsInput!]
  create: [CategoryCreateWithoutProductsInput!]
}

input CategoryCreateOrConnectWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutProductsInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type CategoryGroupBy {
  _avg: CategoryAvgAggregate
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  _sum: CategorySumAggregate
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

type CategoryMaxAggregate {
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input CategoryMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type CategoryMinAggregate {
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input CategoryMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategoryOrderByWithAggregationInput {
  _avg: CategoryAvgOrderByAggregateInput
  _count: CategoryCountOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
  _sum: CategorySumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  products: ProductOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum CategoryScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CategorySumAggregate {
  id: Int
}

input CategorySumOrderByAggregateInput {
  id: SortOrder
}

input CategoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutCategoriesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyWithWhereWithoutProductsInput {
  data: CategoryUpdateManyMutationInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateManyWithoutProductsNestedInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutProductsInput!]
  create: [CategoryCreateWithoutProductsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutProductsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductsInput!]
}

input CategoryUpdateWithWhereUniqueWithoutProductsInput {
  data: CategoryUpdateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithoutProductsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithWhereUniqueWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  update: CategoryUpdateWithoutProductsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  products: ProductListRelationFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyOrder(data: [OrderCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProduct(data: [ProductCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneOrder(data: OrderCreateInput!): Order!
  createOneProduct(data: ProductCreateInput!): Product!
  createOneUser(data: UserCreateInput!): User!
  deleteManyCategory(where: CategoryWhereInput): AffectedRowsOutput!
  deleteManyOrder(where: OrderWhereInput): AffectedRowsOutput!
  deleteManyProduct(where: ProductWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneOrder(where: OrderWhereUniqueInput!): Order
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRowsOutput!
  updateManyOrder(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): AffectedRowsOutput!
  updateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertOneOrder(create: OrderCreateInput!, update: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  upsertOneProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Order {
  _count: OrderCount
  createdAt: DateTime!
  customer: User
  id: String!
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  updatedAt: DateTime!
  userId: Int
}

type OrderAvgAggregate {
  userId: Float
}

input OrderAvgOrderByAggregateInput {
  userId: SortOrder
}

type OrderCount {
  products: Int!
}

type OrderCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input OrderCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input OrderCreateInput {
  createdAt: DateTime
  customer: UserCreateNestedOneWithoutOrdersInput
  id: String
  products: ProductCreateNestedManyWithoutOrdersInput
  updatedAt: DateTime
}

input OrderCreateManyCustomerInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input OrderCreateManyCustomerInputEnvelope {
  data: [OrderCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input OrderCreateManyInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: Int
}

input OrderCreateNestedManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutCustomerInput!]
  create: [OrderCreateWithoutCustomerInput!]
  createMany: OrderCreateManyCustomerInputEnvelope
}

input OrderCreateNestedManyWithoutProductsInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutProductsInput!]
  create: [OrderCreateWithoutProductsInput!]
}

input OrderCreateOrConnectWithoutCustomerInput {
  create: OrderCreateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutProductsInput {
  create: OrderCreateWithoutProductsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateWithoutCustomerInput {
  createdAt: DateTime
  id: String
  products: ProductCreateNestedManyWithoutOrdersInput
  updatedAt: DateTime
}

input OrderCreateWithoutProductsInput {
  createdAt: DateTime
  customer: UserCreateNestedOneWithoutOrdersInput
  id: String
  updatedAt: DateTime
}

type OrderGroupBy {
  _avg: OrderAvgAggregate
  _count: OrderCountAggregate
  _max: OrderMaxAggregate
  _min: OrderMinAggregate
  _sum: OrderSumAggregate
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  userId: Int
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

type OrderMaxAggregate {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: Int
}

input OrderMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type OrderMinAggregate {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: Int
}

input OrderMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByWithAggregationInput {
  _avg: OrderAvgOrderByAggregateInput
  _count: OrderCountOrderByAggregateInput
  _max: OrderMaxOrderByAggregateInput
  _min: OrderMinOrderByAggregateInput
  _sum: OrderSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input OrderOrderByWithRelationInput {
  createdAt: SortOrder
  customer: UserOrderByWithRelationInput
  id: SortOrder
  products: ProductOrderByRelationAggregateInput
  updatedAt: SortOrder
  userId: SortOrder
}

enum OrderScalarFieldEnum {
  createdAt
  id
  updatedAt
  userId
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input OrderScalarWhereWithAggregatesInput {
  AND: [OrderScalarWhereWithAggregatesInput!]
  NOT: [OrderScalarWhereWithAggregatesInput!]
  OR: [OrderScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntNullableWithAggregatesFilter
}

type OrderSumAggregate {
  userId: Int
}

input OrderSumOrderByAggregateInput {
  userId: SortOrder
}

input OrderUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  customer: UserUpdateOneWithoutOrdersNestedInput
  id: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutOrdersNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyWithWhereWithoutCustomerInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithWhereWithoutProductsInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithoutCustomerNestedInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutCustomerInput!]
  create: [OrderCreateWithoutCustomerInput!]
  createMany: OrderCreateManyCustomerInputEnvelope
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutCustomerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
}

input OrderUpdateManyWithoutProductsNestedInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutProductsInput!]
  create: [OrderCreateWithoutProductsInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutProductsInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutProductsInput!]
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  data: OrderUpdateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutProductsInput {
  data: OrderUpdateWithoutProductsInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithoutCustomerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutOrdersNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateWithoutProductsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  customer: UserUpdateOneWithoutOrdersNestedInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  create: OrderCreateWithoutCustomerInput!
  update: OrderUpdateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutProductsInput {
  create: OrderCreateWithoutProductsInput!
  update: OrderUpdateWithoutProductsInput!
  where: OrderWhereUniqueInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  createdAt: DateTimeFilter
  customer: UserRelationFilter
  id: StringFilter
  products: ProductListRelationFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input OrderWhereUniqueInput {
  id: String
}

type Product {
  _count: ProductCount
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  quantity: Int!
  sku: String!
  updatedAt: DateTime!
}

type ProductAvgAggregate {
  quantity: Float
}

input ProductAvgOrderByAggregateInput {
  quantity: SortOrder
}

type ProductCount {
  categories: Int!
  orders: Int!
}

type ProductCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  quantity: Int!
  sku: Int!
  updatedAt: Int!
}

input ProductCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  quantity: SortOrder
  sku: SortOrder
  updatedAt: SortOrder
}

input ProductCreateInput {
  categories: CategoryCreateNestedManyWithoutProductsInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  orders: OrderCreateNestedManyWithoutProductsInput
  quantity: Int!
  sku: String!
  updatedAt: DateTime
}

input ProductCreateManyInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  quantity: Int!
  sku: String!
  updatedAt: DateTime
}

input ProductCreateNestedManyWithoutCategoriesInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoriesInput!]
  create: [ProductCreateWithoutCategoriesInput!]
}

input ProductCreateNestedManyWithoutOrdersInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutOrdersInput!]
  create: [ProductCreateWithoutOrdersInput!]
}

input ProductCreateOrConnectWithoutCategoriesInput {
  create: ProductCreateWithoutCategoriesInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutOrdersInput {
  create: ProductCreateWithoutOrdersInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutCategoriesInput {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  orders: OrderCreateNestedManyWithoutProductsInput
  quantity: Int!
  sku: String!
  updatedAt: DateTime
}

input ProductCreateWithoutOrdersInput {
  categories: CategoryCreateNestedManyWithoutProductsInput
  createdAt: DateTime
  description: String
  id: String
  name: String!
  quantity: Int!
  sku: String!
  updatedAt: DateTime
}

type ProductGroupBy {
  _avg: ProductAvgAggregate
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  _sum: ProductSumAggregate
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  quantity: Int!
  sku: String!
  updatedAt: DateTime!
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

type ProductMaxAggregate {
  createdAt: DateTime
  description: String
  id: String
  name: String
  quantity: Int
  sku: String
  updatedAt: DateTime
}

input ProductMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  quantity: SortOrder
  sku: SortOrder
  updatedAt: SortOrder
}

type ProductMinAggregate {
  createdAt: DateTime
  description: String
  id: String
  name: String
  quantity: Int
  sku: String
  updatedAt: DateTime
}

input ProductMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  quantity: SortOrder
  sku: SortOrder
  updatedAt: SortOrder
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByWithAggregationInput {
  _avg: ProductAvgOrderByAggregateInput
  _count: ProductCountOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  _sum: ProductSumOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  quantity: SortOrder
  sku: SortOrder
  updatedAt: SortOrder
}

input ProductOrderByWithRelationInput {
  categories: CategoryOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  orders: OrderOrderByRelationAggregateInput
  quantity: SortOrder
  sku: SortOrder
  updatedAt: SortOrder
}

enum ProductScalarFieldEnum {
  createdAt
  description
  id
  name
  quantity
  sku
  updatedAt
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  quantity: IntFilter
  sku: StringFilter
  updatedAt: DateTimeFilter
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  sku: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ProductSumAggregate {
  quantity: Int
}

input ProductSumOrderByAggregateInput {
  quantity: SortOrder
}

input ProductUpdateInput {
  categories: CategoryUpdateManyWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutProductsNestedInput
  quantity: IntFieldUpdateOperationsInput
  sku: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  sku: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyWithWhereWithoutCategoriesInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutOrdersInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutCategoriesNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoriesInput!]
  create: [ProductCreateWithoutCategoriesInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCategoriesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input ProductUpdateManyWithoutOrdersNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutOrdersInput!]
  create: [ProductCreateWithoutOrdersInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutOrdersInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutOrdersInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutOrdersInput!]
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  data: ProductUpdateWithoutCategoriesInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutOrdersInput {
  data: ProductUpdateWithoutOrdersInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutCategoriesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutProductsNestedInput
  quantity: IntFieldUpdateOperationsInput
  sku: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateWithoutOrdersInput {
  categories: CategoryUpdateManyWithoutProductsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  sku: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  create: ProductCreateWithoutCategoriesInput!
  update: ProductUpdateWithoutCategoriesInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutOrdersInput {
  create: ProductCreateWithoutOrdersInput!
  update: ProductUpdateWithoutOrdersInput!
  where: ProductWhereUniqueInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  categories: CategoryListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  orders: OrderListRelationFilter
  quantity: IntFilter
  sku: StringFilter
  updatedAt: DateTimeFilter
}

input ProductWhereUniqueInput {
  id: String
  sku: String
}

type Query {
  aggregateCategory(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): AggregateCategory!
  aggregateOrder(cursor: OrderWhereUniqueInput, orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): AggregateOrder!
  aggregateProduct(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): AggregateProduct!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  findFirstCategory(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstCategoryOrThrow(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstOrder(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): Order
  findFirstOrderOrThrow(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): Order
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstProductOrThrow(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getCategory(where: CategoryWhereUniqueInput!): Category
  getOrder(where: OrderWhereUniqueInput!): Order
  getProduct(where: ProductWhereUniqueInput!): Product
  getUser(where: UserWhereUniqueInput!): User
  groupByCategory(by: [CategoryScalarFieldEnum!]!, having: CategoryScalarWhereWithAggregatesInput, orderBy: [CategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: CategoryWhereInput): [CategoryGroupBy!]!
  groupByOrder(by: [OrderScalarFieldEnum!]!, having: OrderScalarWhereWithAggregatesInput, orderBy: [OrderOrderByWithAggregationInput!], skip: Int, take: Int, where: OrderWhereInput): [OrderGroupBy!]!
  groupByProduct(by: [ProductScalarFieldEnum!]!, having: ProductScalarWhereWithAggregatesInput, orderBy: [ProductOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductWhereInput): [ProductGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  order(where: OrderWhereUniqueInput!): Order
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  product(where: ProductWhereUniqueInput!): Product
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  address: String
  createdAt: DateTime!
  email: String!
  firstName: String
  id: Int!
  lastName: String
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  updatedAt: DateTime!
}

type UserAvgAggregate {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCount {
  orders: Int!
}

type UserCountAggregate {
  _all: Int!
  address: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  address: String
  createdAt: DateTime
  email: String!
  firstName: String
  lastName: String
  orders: OrderCreateNestedManyWithoutCustomerInput
  updatedAt: DateTime
}

input UserCreateManyInput {
  address: String
  createdAt: DateTime
  email: String!
  firstName: String
  id: Int
  lastName: String
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  create: UserCreateWithoutOrdersInput
}

input UserCreateOrConnectWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutOrdersInput {
  address: String
  createdAt: DateTime
  email: String!
  firstName: String
  lastName: String
  updatedAt: DateTime
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  address: String
  createdAt: DateTime!
  email: String!
  firstName: String
  id: Int!
  lastName: String
  updatedAt: DateTime!
}

type UserMaxAggregate {
  address: String
  createdAt: DateTime
  email: String
  firstName: String
  id: Int
  lastName: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  address: String
  createdAt: DateTime
  email: String
  firstName: String
  id: Int
  lastName: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  address: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  address: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  orders: OrderOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  address
  createdAt
  email
  firstName
  id
  lastName
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  firstName: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  lastName: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregate {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutCustomerNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneWithoutOrdersNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  create: UserCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutOrdersInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateWithoutOrdersInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  update: UserUpdateWithoutOrdersInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  address: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringNullableFilter
  id: IntFilter
  lastName: StringNullableFilter
  orders: OrderListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
